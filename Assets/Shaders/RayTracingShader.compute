#pragma enable_d3d11_debug_symbols
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
cbuffer FrameCBuffer
{
    //Camera
    float4x4 _CameraToWorld;
    float4x4 _CameraInverseProjection;
    // random jitter for anti-aliasing
    float2 _PixelOffset;
    //Rnd
    float _Seed;
}

// skybox
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

/*========== Utility ============*/
static const float EPSILON = 1e-8;

float sdot(float3 x, float3 y, float f = 1.0f) {
    return saturate(dot(x, y) * f);
}

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}
/*==========RNG============*/
float rand(float2 pixel)
{
    float result = frac(sin(_Seed / 100.0f * dot(pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

//  ref: https://www.shadertoy.com/view/4djSRW

float hash12(float2 p)
{
	float3 p3  = frac(float3(p.xyx) * .1031f);
    p3 += dot(p3, p3.yzx + 33.33f);
    return frac((p3.x + p3.y) * p3.z);
}

// ref: http://corysimon.github.io/articles/uniformdistn-on-sphere/
float3 SampleHemisphere(float2 pixel, float3 normal)
{
    // Uniformly sample hemisphere direction
    float cosTheta = rand(pixel);
    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    float phi = 2 * PI * rand(pixel);
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

/*=============Supported Object Geometries================*/
// BVH
struct FourTransposedAabbs
{
    float4 Lx, Hx;    // Lower and upper bounds along the X axis.
    float4 Ly, Hy;    // Lower and upper bounds along the Y axis.
    float4 Lz, Hz;    // Lower and upper bounds along the Z axis.
};
struct BoundingVolumeHierarchyNode
{
    FourTransposedAabbs Bounds;
    int4 Data;
    int Flags;
};
// max array size for doing depth-first traversal of BVH
static const uint MAX_BVH_STACK_INT4 = 64;
//TLAS
StructuredBuffer<BoundingVolumeHierarchyNode> _TLAS;
//BLAS
StructuredBuffer<int> _BLASOffsets;
StructuredBuffer<BoundingVolumeHierarchyNode> _BLAS;
// Triangle meshes
StructuredBuffer<int> _VerticesOffsets;
struct Vertex
{
    float3 position;
    float3 normal;
};
StructuredBuffer<Vertex> _Vertices;
StructuredBuffer<int> _TrianglesOffsets;
StructuredBuffer<int3> _Triangles;
//Per Object Property
struct TriMeshMaterial {
    float3 albedo;
    float3 specular;
    float3 emission;
};
StructuredBuffer<TriMeshMaterial> _TriMeshMats;
StructuredBuffer<float4x4> _WorldToLocalMatrices;

/*=======Ray=======*/
struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    float3 invDir;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.invDir = 1.0f / direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
        // retrieve the translation column (shearing in homo space)
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

/*********Ray Hit **************/
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 emission;
};
RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.emission = float3(0.0f,0.0f,0.0f);
    return hit;
}

/*=============Intersection Functions================*/
struct Trisect {
    float t;
    float u;
    float v;
};

Trisect CreateTrisect() {
    Trisect T;
    T.t = 1.#INF;
    T.u = -1;
    T.v = -1;
    return T;
}

// Ref https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle
// MÃ¶ller-Trumbore algorithm
bool Trisection(Ray ray, float3 v0, float3 v1, float3 v2,
    inout Trisect T)
{
    float3 v0v1 = v1 - v0;
    float3 v0v2 = v2 - v0;
    
    float3 pvec = cross(ray.direction, v0v2);
    float det = dot(v0v1, pvec);
    // culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;

    float3 tvec = ray.origin - v0;

    // U
    float u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f) return false;

    // V
    float3 qvec = cross(tvec, v0v1);
    float v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f) return false;

    // t
    float t = dot(v0v2, qvec) * inv_det;
    if (t > 0) {
        T.t = t;
        T.u = u;
        T.v = v;
        return true;
    }
    return false;
}

bool4 Raycast(FourTransposedAabbs aabbs, Ray ray, float maxFraction, inout float4 hitDistance)
{
    float4 lx = aabbs.Lx - ray.origin.x;
    float4 hx = aabbs.Hx - ray.origin.x;
    float4 nearXt = lx * ray.invDir.x;
    float4 farXt = hx * ray.invDir.x;

    float4 ly = aabbs.Ly - ray.origin.y;
    float4 hy = aabbs.Hy - ray.origin.y;
    float4 nearYt = ly * ray.invDir.y;
    float4 farYt = hy * ray.invDir.y;

    float4 lz = aabbs.Lz - ray.origin.z;
    float4 hz = aabbs.Hz - ray.origin.z;
    float4 nearZt = lz * ray.invDir.z;
    float4 farZt = hz * ray.invDir.z;

    float4 nearX = min(nearXt, farXt);
    float4 farX = max(nearXt, farXt);

    float4 nearY = min(nearYt, farYt);
    float4 farY = max(nearYt, farYt);

    float4 nearZ = min(nearZt, farZt);
    float4 farZ = max(nearZt, farZt);

    float4 nearMax = max(max(max(nearX, nearY), nearZ), 0);
    float4 farMin = min(min(min(farX, farY), farZ), maxFraction);

    hitDistance = min(nearMax, farMin);
    return nearMax <= farMin;
}

inline int4 SetInt4ByIndex(int4 value4, int index, int value)
{
    int value4Array[4] = {value4.x, value4.y, value4.z, value4.w};
    value4Array[index] = value;
    return int4(value4Array[0], value4Array[1], value4Array[2], value4Array[3]);
}

inline int GetInt4ByIndex(int4 value4, int index)
{
    return value4[index];
}

void IntersectBLAS(Ray ray, int index, inout RayHit bestHit)
{
    int blasOffset = _BLASOffsets[index];
    
    float4x4 worldToLocal = _WorldToLocalMatrices[index];
    Ray localRay = CreateRay(mul(worldToLocal, float4(ray.origin, 1)).xyz, mul(worldToLocal, float4(ray.direction, 0)).xyz);
    
    int4 stack[MAX_BVH_STACK_INT4];
    int top = 0;
    stack[top / 4] = SetInt4ByIndex(stack[top / 4], top % 4, 1);
    top++;
    do
    {
        top--;
        int topIndex = GetInt4ByIndex(stack[top / 4], top % 4);
        BoundingVolumeHierarchyNode node = _BLAS[topIndex + blasOffset];
        float4 hitDistance;
        bool4 hitMask = Raycast(node.Bounds, localRay, bestHit.distance, hitDistance);
        [unroll]
        for (int i = 0; i < 4; i++)
        {
            if(node.Data[i] <= 0 || !hitMask[i])
                continue;
            if (node.Flags != 0 && node.Data[i] == -1)
            {

                int3 triangleIndex = _Triangles[node.Data[i] + _TrianglesOffsets[index]];
                Vertex
                    v0 = _Vertices[triangleIndex.x + _VerticesOffsets[index]],
                    v1 = _Vertices[triangleIndex.y + _VerticesOffsets[index]],
                    v2 = _Vertices[triangleIndex.z + _VerticesOffsets[index]];

                Trisect tri = CreateTrisect();
                if (Trisection(localRay, v0.position, v1.position, v2.position, tri))
                {
                    if (tri.t > 0 && tri.t < bestHit.distance)
                    {
                        bestHit.distance = tri.t;
                        bestHit.position = localRay.origin + tri.t * localRay.direction;

                        // interpolate normals
                        float w = 1 - tri.u - tri.v;
                        bestHit.normal = (tri.u*v1.normal) + (tri.v * v2.normal) + (w * v0.normal);

                        // get mesh mat
                        TriMeshMaterial triMat = _TriMeshMats[index];
                        bestHit.albedo = triMat.albedo;
                        bestHit.specular = triMat.specular;
                        bestHit.emission = triMat.emission;
                    }
                }
            }
            else
            {
                stack[top / 4] = SetInt4ByIndex(top / 4, top % 4, node.Data[i]);
                top++;
            }
        }
        
    } while (top > 0);
}

void IntersectTLAS(Ray ray, inout RayHit bestHit)
{
    int4 stack[MAX_BVH_STACK_INT4];
    int top = 0;
    stack[top / 4] = SetInt4ByIndex(top / 4, top % 4, 1);
    top++;
    do
    {
        top--;
        int topIndex = GetInt4ByIndex(stack[top / 4], top % 4);
        BoundingVolumeHierarchyNode node = _TLAS[topIndex];
        float4 hitDistance;
        bool4 hitMask = Raycast(node.Bounds, ray, bestHit.distance, hitDistance);
        [unroll]
        for (int i = 0; i < 4; i++)
        {
            if(node.Data[i] <= 0 || !hitMask[i])
                continue;
            if (node.Flags != 0)
            {
                IntersectBLAS(ray, node.Data[i], bestHit);
            }
            else
            {
                stack[top / 4] = SetInt4ByIndex(top / 4, top % 4, node.Data[i]);
                top++;
            }
        }
    } while (top > 0);
}

RayHit Trace(Ray ray) // populate bestHit
{
    RayHit bestHit = CreateRayHit();
    IntersectTLAS(ray, bestHit);
    return bestHit;
}

float3 Shade(float2 pixel, inout Ray ray, inout RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Roulette shading copied from: http://three-eyed-games.com/2018/05/12/gpu-path-tracing-in-unity-part-2/
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;
        // Roulette-select the ray's path
        float roulette = rand(pixel);
        if (roulette < specChance)
        {
            // Specular reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = reflect(ray.direction, hit.normal);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction);
        }
        else
        {
            // Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(pixel, hit.normal);
            ray.energy *= (1.0f / diffChance) * 2 * hit.albedo * sdot(hit.normal, ray.direction);
        }

        return hit.emission;
    }
    else
    {
        // no hit, set energy to 0
        ray.energy = float3(0.0f, 0.0f, 0.0f);
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    
    // Transform pixel to [-1,1] range
        // jittered ray sample, random(0-1, 0-1) _PixelOffset
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    // Get a ray from the UVs
    Ray ray = CreateCameraRay(uv);  
    
    // Path Trace and shade
    float3 result = float3(0, 0, 0);
    [unroll]
    for (int i = 0; i < 2 /* max num reflections */; i++)
    {
        RayHit hit = Trace(ray);
        // ORDER MATTERS! energy between hit point and origin.
        // multiply energy at current ray path with light emitted at hit point
        result += ray.energy * Shade(id.xy, ray, hit);
        // then update ray energy to account attenuation at hit point
        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = float4(result, 1);
}
